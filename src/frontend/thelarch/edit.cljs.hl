(ns thelarch.edit
  (:refer-clojure :exclude [next])
  (:require
    [thelarch.zip :as zip])
  (:require-macros [thelarch.edit :refer [defn+]]))

(defc  state  nil)
(defc  buffer nil)
(defc  mode   :normal)
(defc= root   (zip/root state))

(defn set-state! [tree]
  (reset! state (zip/zipper tree)))

(def test-state
  [{:id 1 :text "my org mode document"}
   [{:id 2 :text "a child"}]
   [{:id 3 :text "another child"}
    [{:id 4 :text "inner dude the first"}]
    [{:id 6 :text "inner dude the second"}]
    [{:id 7 :text "inner dude the third"}]]
   [{:id 5 :text "yet another child"}]])

(set-state! test-state)

(defn+ next          "foop" [] (swap! state zip/next))
(defn+ prev          "foop" [] (swap! state zip/prev))
(defn+ indent        "foop" [] (swap! state zip/indent))
(defn+ outdent       "foop" [] (swap! state zip/outdent))
(defn+ yank          "foop" [] (when-not (zip/root? @state) (reset! buffer (zip/node @state))))
(defn+ delete        "foop" [] (yank) (swap! state zip/delete))
(defn+ paste-after   "foop" [] (when @buffer (swap! state zip/paste-right @buffer) (reset! buffer nil)))
(defn+ mode-insert   "foop" [] (reset! mode :insert))
(defn+ mode-normal   "foop" [] (reset! mode :normal))
(defn+ mode-toggle   "foop" [] (swap! mode (partial get {:normal :insert}) :normal))
(defn+ insert-before "foop" [] (dosync (swap! state zip/create-left) (mode-insert)))
(defn+ insert-after  "foop" [] (dosync (swap! state zip/create-right) (mode-insert)))
(defn+ insert-first  "foop" [] (dosync (swap! state zip/create-first) (mode-insert)))
(defn+ insert-last   "foop" [] (dosync (swap! state zip/create-last) (mode-insert)))
(defn+ insert-child  "foop" [] (dosync (swap! state zip/create-child) (mode-insert)))
(defn+ first-sibling "foop" [] (swap! state zip/first-sibling))
(defn+ last-sibling  "foop" [] (swap! state zip/last-sibling))

(defc key-bindings
  {:normal {"j" next
            "k" prev
            ">" indent
            "<" outdent
            "x" delete
            "y" yank
            "p" paste-after
            "i" insert-before
            "a" insert-after
            "I" insert-first
            "A" insert-last
            "o" insert-child
            "c" mode-insert
            "^" first-sibling
            "$" last-sibling}})

(defn ctrl-key
  "Handles ESC and ENTER (bind to keyup event)."
  [e]
  (case (.-which e) 13 (mode-toggle) 27 (mode-normal) nil))

(defn cmd-key
  "Handles editor key presses (bind to keypress event)."
  [e]
  ((get-in @key-bindings [@mode (.fromCharCode js/String (.-which e))])))

