(ns thelarch.rpc
  (:require-macros
    [adzerk.env :as env])
  (:require
   [goog.net.Cookies]
   [thelarch.edit :as edit]
   [castra.core :refer [mkremote]]))

(env/def
  THELARCH_GH_BASIC_CLIENT_ID :required)

(defc state   nil)
(defc user    nil)
(defc tree    nil)
(defc error   nil)
(defc loading [])

(defn pr-ex [ex]
  (when-let [stack (and ex (.-serverStack ex))]
    (.groupCollapsed js/console "RPC error: %s" (:message ex))
    (.error js/console stack)
    (.groupEnd js/console)))

(def get-state (mkremote 'thelarch.api/get-state state error loading))
(def get-user  (mkremote 'thelarch.api/get-user  user  error loading))
(def put-tree  (mkremote 'thelarch.api/put-tree  tree  error loading {:on-error pr-ex}))

(def cks (goog.net.Cookies. js/document))

(defn get-cookies []
  (reduce #(assoc %1 %2 (.get cks %2)) {} (.getKeys cks)))

(defn init []
  (get-user (.get (get-cookies) "access-token")))

(defn login! []
  (set! (.-location js/window)
        (str "https://github.com/login/oauth/authorize?client_id="
             THELARCH_GH_BASIC_CLIENT_ID)))

(defn logout! []
  (.remove cks "access-token")
  (get-user nil)
  (.reload (.-location js/window)))

;; add test data for testing
(add-watch user (gensym)
  #(cond
     (and %4 (not %3))
     (edit/set-state! [{:id 1 :text "my org mode document"}
                       [{:id 2 :text "a child"}]
                       [{:id 3 :text "another child"}
                        [{:id 4 :text "inner dude the first"}]
                        [{:id 6 :text "inner dude the second"}]
                        [{:id 7 :text "inner dude the third"}]]
                       [{:id 5 :text "yet another child"}]])))

