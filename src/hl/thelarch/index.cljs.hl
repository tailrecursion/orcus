(page "index.html"
  (:require
    [thelarch.zip :as zip]
    [thelarch.rpc :as rpc]))

(def test-data
  [{:id 1 :text "my org mode document"}
   [{:id 2 :text "a child"}]
   [{:id 3 :text "another child"}
    [{:id 4 :text "inner dude the first"}]
    [{:id 6 :text "inner dude the second"}]
    [{:id 7 :text "inner dude the third"}]]
   [{:id 5 :text "yet another child"}]])

(def indexed (partial map-indexed list))

(defc mode :normal)
(defc tree (zip/zipper test-data))

(defmulti  keymap (fn [mode key] [mode key]))
(defmethod keymap [:normal "j"] [_ _] (swap! tree zip/next))
(defmethod keymap [:normal "k"] [_ _] (swap! tree zip/prev))
(defmethod keymap [:normal ">"] [_ _] (swap! tree zip/indent))
(defmethod keymap [:normal "<"] [_ _] (swap! tree zip/outdent))
(defmethod keymap [:normal "x"] [_ _] (swap! tree zip/delete))
(defmethod keymap [:normal "o"] [_ _] (swap! tree zip/create) (reset! mode :insert))
(defmethod keymap [:normal "i"] [_ _] (reset! mode :insert))
(defmethod keymap :default [m k] (.log js/console "No %s mode binding for key '%s'" (str m) k))

(defn ctrl-key [e]
  (let [k (.-which e)]
    (if (or (= 27 k) (= 13 k))
      (reset! mode :normal)
      (let [c (when (.-ctrlKey e) "C-")
            m (when (.-metaKey e) "M-")]
        (when (or c m) (keymap @mode (str c m (.fromCharCode js/String k))))))))

(defn cmd-key [e]
  (keymap @mode (.fromCharCode js/String (.-which e))))

(defn node
  [z]
  (cell-let [{:keys [id text editing] :as item} (cell= (zip/item z))]
    (let [kids     (cell= (indexed (zip/children z)))
          point?   (cell= (= item (zip/item tree)))
          editing? (cell= (and point? (= mode :insert)))
          classes  (cell= {:editing editing? :point point?})]
      (div (p :class classes
              :toggle (cell= (not editing?))
              :click #(when (= @mode :normal) (swap! tree zip/goto @z))
              text)
           (input :type "text"
                  :toggle editing?
                  :focus editing?
                  :value text
                  :keyup #(swap! tree zip/set-text @%))
           (ul (loop-tpl :bindings [[i kid] kids] (li (node kid))))))))

(html
  (head
    (link :href "app.css" :rel "stylesheet"))
  (body :keyup ctrl-key :keypress cmd-key
        (p (text "~{mode}"))
        (node (cell= (zip/root tree)))))
